{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","ContactForm","state","name","number","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","contactForAdd","props","onSubmitData","reset","className","style","contactform","type","onSubmit","this","pattern","title","required","onChange","Component","ContactList","deleteId","Id","del","createList","contacts","map","contact","id","onClick","uuidv4","defaultProps","Filter","setFilterValue","toUpperCase","setFilterToState","App","filter","formSubmitHandler","data","repeatControl","cur","includes","arrayCont","alert","elementDelete","arr","idContact","elem","deleteContactFromContactList","newArrAfterDel","filterData","filterArr","fArr","localStorage","getItem","parsedContacts","JSON","parse","prevProps","prevState","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac8e7903.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactform\":\"ContactForm_contactform__2Lj2W\",\"text\":\"ContactForm_text__1r33n\"};","import style from './ContactForm.module.css';\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ContactForm extends Component {\r\n    state = {\r\n        name: '',\r\n        number: '',\r\n    };\r\n    handleChange = event => {\r\n        /*     console.log(event.currentTarget);\r\n        console.log(event.currentTarget.name);\r\n        console.log(event.currentTarget.value); */\r\n        const { name, value } = event.currentTarget;\r\n        this.setState({ [name]: value });\r\n        //this.setState({ [event.currentTarget.name]: event.currentTarget.value });\r\n    };\r\n    /*   inputNameEvent = event => {\r\n      this.setState({ curName: event.currentTarget.value });\r\n    };\r\n    inputTelEvent = event => {\r\n      this.setState({ curTel: event.currentTarget.value });\r\n    }; */\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        let contactForAdd = { name: this.state.name, number: this.state.number };\r\n        //console.log(this.state);\r\n        this.props.onSubmitData(contactForAdd);\r\n\r\n        this.reset();\r\n    };\r\n\r\n    reset = () => {\r\n        this.setState({ name: '', number: '' });\r\n    };\r\n    render() {\r\n        return (\r\n            <div className={style.contactform}>\r\n                <form type=\"submit\" onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Name\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                            required\r\n                            onChange={this.handleChange}\r\n                            value={this.state.name}\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Number\r\n                        <input\r\n                            type=\"tel\"\r\n                            name=\"number\"\r\n                            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n                            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n                            required\r\n                            onChange={this.handleChange}\r\n                            value={this.state.number}\r\n                        />\r\n                    </label>\r\n\r\n                    <button type=\"submit\">Add contact</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nContactForm.propTypes = {\r\n    onSubmitData: PropTypes.func.isRequired,\r\n};\r\nexport default ContactForm;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nclass ContactList extends Component {\r\n    deleteId = Id => {\r\n        this.props.del(Id);\r\n    };\r\n    createList = () => {\r\n        return this.props.contacts.map(contact => {\r\n            return (\r\n                <li key={uuidv4()} id={contact.id}>\r\n                    {`${contact.name}: ${contact.number}`}\r\n                    <button\r\n                        data-id={contact.id}\r\n                        onClick={() => this.deleteId(contact.id)}\r\n                    >\r\n                        Delete\r\n                    </button>\r\n                </li>\r\n            );\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return <ul>{this.createList()}</ul>;\r\n    }\r\n}\r\nContactList.propTypes = {\r\n    contacts: PropTypes.array.isRequired,\r\n    del: PropTypes.func.isRequired,\r\n};\r\nContactList.defaultProps = {\r\n    contacts: [],\r\n};\r\n\r\nexport default ContactList;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Filter extends Component {\r\n    setFilterValue = event => {\r\n        let value = event.currentTarget.value.toUpperCase();\r\n        this.props.setFilterToState(value);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h4>Find contacts by name</h4>\r\n                <input onChange={this.setFilterValue}></input>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nFilter.propTypes = {\r\n    setFilterToState: PropTypes.func.isRequired,\r\n};\r\nexport default Filter;","import React, { Component } from \"react\";\n\nimport { v4 as uuidv4 } from \"uuid\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport Filter from \"./components/Filter/Filter\";\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n   const contacts = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n     if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  formSubmitHandler = (data) => {\n    this.repeatControl(data);\n  };\n\n  repeatControl = (data) => {\n    let nameArray = [];\n    nameArray = this.state.contacts.map((cur) => cur.name);\n    if (!nameArray.includes(data.name)) {\n      let arrayCont = [];\n      arrayCont = [\n        ...this.state.contacts,\n        { id: uuidv4(), name: data.name, number: data.number },\n      ];\n      return this.setState({ ...this.state, contacts: arrayCont });\n    } else {\n      alert(\" Контакт вже є у телефонній книзі!!!\");\n    }\n  };\n\n  elementDelete = (arr, idContact) => {\n    let newArr = arr.filter((elem) => elem.id !== idContact);\n    return newArr;\n  };\n\n  deleteContactFromContactList = (idContact) => {\n    let newArrAfterDel = this.elementDelete(this.state.contacts, idContact);\n    this.setState({\n      ...this.state,\n      contacts: [...newArrAfterDel],\n    });\n  };\n\n  setFilterToState = (filterData) => {\n    this.setState({ ...this.state, filter: `${filterData}` });\n  };\n\n  filterArr = (fArr) => {\n    let newArr = fArr.filter((cur) =>\n      cur.name.toUpperCase().includes(this.state.filter)\n    );\n    return newArr;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n        <ContactForm onSubmitData={this.formSubmitHandler} />\n        <h1>Contacts</h1>\n        <Filter setFilterToState={this.setFilterToState} />\n        <ContactList\n          contacts={this.filterArr(this.state.contacts)}\n          del={this.deleteContactFromContactList}\n        />\n      </div>\n    );\n  }\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}